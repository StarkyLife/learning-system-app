{"ast":null,"code":"const MAIN_ID = \"main\";\nexport class InMemoryNotesGateway {\n  constructor(dbNotes) {\n    this.notes = void 0;\n\n    this.getMainNote = async () => {\n      const note = this.getOrCreateMain();\n      return {\n        id: note.id,\n        text: note.text,\n        content: note.content.map(this.createShortNote(note.id)).filter(this.isShortNoteExist)\n      };\n    };\n\n    this.getNote = async id => {\n      if (id === MAIN_ID) return this.getMainNote();\n      const note = this.notes.get(id);\n\n      if (!note) {\n        return null;\n      }\n\n      const parentNote = this.getNotesArray().find(potentialParentNote => potentialParentNote.content.includes(note.id));\n      return {\n        id: note.id,\n        text: note.text,\n        parentId: (parentNote === null || parentNote === void 0 ? void 0 : parentNote.id) || MAIN_ID,\n        content: note.content.map(this.createShortNote(note.id)).filter(this.isShortNoteExist)\n      };\n    };\n\n    this.saveNote = async updatedNote => {\n      const noteToSaveInDb = this.tryGetNote(updatedNote.id);\n      this.notes.set(updatedNote.id, { ...noteToSaveInDb,\n        text: updatedNote.text,\n        content: updatedNote.content.map(n => n.id)\n      });\n      const childNotesIdsForDelete = new Map(noteToSaveInDb.content.map(id => [id, id]));\n      updatedNote.content.forEach(childNote => {\n        this.updateChildNote(childNote);\n        childNotesIdsForDelete.delete(childNote.id);\n      });\n      childNotesIdsForDelete.forEach(this.cascadeDelete);\n    };\n\n    this.moveNote = async _ref => {\n      let {\n        id,\n        oldParentId,\n        newParentId\n      } = _ref;\n      const oldParent = this.tryGetNote(oldParentId);\n      const newParent = this.tryGetNote(newParentId);\n      this.notes.set(oldParent.id, { ...oldParent,\n        content: oldParent.content.filter(i => i !== id)\n      });\n      this.notes.set(newParent.id, { ...newParent,\n        content: newParent.content.concat(id)\n      });\n    };\n\n    this.createShortNote = parentId => id => {\n      const foundNote = this.notes.get(id);\n\n      if (!foundNote) {\n        console.error(`Found reference to nonexistent note. ID = ${id}. ParentID = ${parentId}`);\n        return null;\n      }\n\n      return {\n        id: foundNote.id,\n        text: foundNote.text\n      };\n    };\n\n    this.isShortNoteExist = n => Boolean(n);\n\n    this.updateChildNote = childNote => {\n      const existingNote = this.notes.get(childNote.id);\n\n      if (existingNote) {\n        this.notes.set(childNote.id, { ...existingNote,\n          text: childNote.text\n        });\n      } else {\n        this.notes.set(childNote.id, {\n          id: childNote.id,\n          text: childNote.text,\n          content: []\n        });\n      }\n    };\n\n    this.cascadeDelete = noteId => {\n      const note = this.notes.get(noteId);\n\n      if (!note) {\n        console.warn(`Deleting. Couldn't find note with ID = ${noteId}. Skipping...`);\n        return;\n      }\n\n      note.content.forEach(this.cascadeDelete);\n      this.notes.delete(note.id);\n    };\n\n    this.notes = new Map(dbNotes.map(n => [n.id, n]));\n  }\n\n  getNotesArray() {\n    return Array.from(this.notes.values());\n  }\n\n  getOrCreateMain() {\n    const note = this.notes.get(MAIN_ID);\n\n    if (note) {\n      return note;\n    }\n\n    const newMain = {\n      id: MAIN_ID,\n      text: \"\",\n      content: []\n    };\n    this.notes.set(newMain.id, newMain);\n    return newMain;\n  }\n\n  tryGetNote(id) {\n    const note = this.notes.get(id);\n\n    if (!note) {\n      throw new Error(`Not found! Note ID = ${id}`);\n    }\n\n    return note;\n  }\n\n}","map":{"version":3,"names":["MAIN_ID","InMemoryNotesGateway","constructor","dbNotes","notes","getMainNote","note","getOrCreateMain","id","text","content","map","createShortNote","filter","isShortNoteExist","getNote","get","parentNote","getNotesArray","find","potentialParentNote","includes","parentId","saveNote","updatedNote","noteToSaveInDb","tryGetNote","set","n","childNotesIdsForDelete","Map","forEach","childNote","updateChildNote","delete","cascadeDelete","moveNote","oldParentId","newParentId","oldParent","newParent","i","concat","foundNote","console","error","Boolean","existingNote","noteId","warn","Array","from","values","newMain","Error"],"sources":["/Users/starkylife/projects/learning-system-app/packages/web/src/gateways/in-memory-notes.gateway.ts"],"sourcesContent":["import { ShortNote } from \"../entities/notes\";\nimport { NotesGateway } from \"./notes.gateway\";\n\nconst MAIN_ID = \"main\";\n\nexport type InMemoryDbNote = {\n  id: string;\n  text: string;\n  content: string[];\n};\n\nexport class InMemoryNotesGateway implements NotesGateway {\n  private notes: Map<string, InMemoryDbNote>;\n\n  constructor(dbNotes: InMemoryDbNote[]) {\n    this.notes = new Map(dbNotes.map((n) => [n.id, n]));\n  }\n\n  getMainNote: NotesGateway[\"getMainNote\"] = async () => {\n    const note = this.getOrCreateMain();\n    return {\n      id: note.id,\n      text: note.text,\n      content: note.content\n        .map(this.createShortNote(note.id))\n        .filter(this.isShortNoteExist),\n    };\n  };\n  getNote: NotesGateway[\"getNote\"] = async (id) => {\n    if (id === MAIN_ID) return this.getMainNote();\n\n    const note = this.notes.get(id);\n    if (!note) {\n      return null;\n    }\n\n    const parentNote = this.getNotesArray().find((potentialParentNote) =>\n      potentialParentNote.content.includes(note.id)\n    );\n\n    return {\n      id: note.id,\n      text: note.text,\n      parentId: parentNote?.id || MAIN_ID,\n      content: note.content\n        .map(this.createShortNote(note.id))\n        .filter(this.isShortNoteExist),\n    };\n  };\n  saveNote: NotesGateway[\"saveNote\"] = async (updatedNote) => {\n    const noteToSaveInDb = this.tryGetNote(updatedNote.id);\n\n    this.notes.set(updatedNote.id, {\n      ...noteToSaveInDb,\n      text: updatedNote.text,\n      content: updatedNote.content.map((n) => n.id),\n    });\n\n    const childNotesIdsForDelete = new Map(\n      noteToSaveInDb.content.map((id) => [id, id])\n    );\n\n    updatedNote.content.forEach((childNote) => {\n      this.updateChildNote(childNote);\n\n      childNotesIdsForDelete.delete(childNote.id);\n    });\n\n    childNotesIdsForDelete.forEach(this.cascadeDelete);\n  };\n\n  moveNote: NotesGateway[\"moveNote\"] = async ({\n    id,\n    oldParentId,\n    newParentId,\n  }) => {\n    const oldParent = this.tryGetNote(oldParentId);\n    const newParent = this.tryGetNote(newParentId);\n\n    this.notes.set(oldParent.id, {\n      ...oldParent,\n      content: oldParent.content.filter((i) => i !== id),\n    });\n    this.notes.set(newParent.id, {\n      ...newParent,\n      content: newParent.content.concat(id),\n    });\n  };\n\n  getNotesArray() {\n    return Array.from(this.notes.values());\n  }\n\n  private getOrCreateMain() {\n    const note = this.notes.get(MAIN_ID);\n    if (note) {\n      return note;\n    }\n\n    const newMain: InMemoryDbNote = {\n      id: MAIN_ID,\n      text: \"\",\n      content: [],\n    };\n    this.notes.set(newMain.id, newMain);\n    return newMain;\n  }\n\n  private createShortNote = (parentId: string) => (id: string) => {\n    const foundNote = this.notes.get(id);\n    if (!foundNote) {\n      console.error(\n        `Found reference to nonexistent note. ID = ${id}. ParentID = ${parentId}`\n      );\n      return null;\n    }\n    return {\n      id: foundNote.id,\n      text: foundNote.text,\n    };\n  };\n\n  private tryGetNote(id: string) {\n    const note = this.notes.get(id);\n    if (!note) {\n      throw new Error(`Not found! Note ID = ${id}`);\n    }\n    return note;\n  }\n\n  private isShortNoteExist = (n: ShortNote | null): n is ShortNote =>\n    Boolean(n);\n\n  private updateChildNote = (childNote: ShortNote) => {\n    const existingNote = this.notes.get(childNote.id);\n    if (existingNote) {\n      this.notes.set(childNote.id, {\n        ...existingNote,\n        text: childNote.text,\n      });\n    } else {\n      this.notes.set(childNote.id, {\n        id: childNote.id,\n        text: childNote.text,\n        content: [],\n      });\n    }\n  };\n\n  private cascadeDelete = (noteId: string) => {\n    const note = this.notes.get(noteId);\n    if (!note) {\n      console.warn(\n        `Deleting. Couldn't find note with ID = ${noteId}. Skipping...`\n      );\n      return;\n    }\n    note.content.forEach(this.cascadeDelete);\n    this.notes.delete(note.id);\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}