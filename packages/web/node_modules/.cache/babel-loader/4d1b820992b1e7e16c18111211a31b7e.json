{"ast":null,"code":"export class NotesController {\n  constructor() {\n    this.deps = void 0;\n\n    this.init = async () => {\n      const note = await this.deps.notesGateway.getMainNote();\n      this.deps.viewModel.update({\n        currentNote: note\n      });\n    };\n\n    this.addChildNote = async () => {\n      const currentNote = this.tryGetCurrentNote();\n      const newId = Date.now().toString();\n      const updatedNote = { ...currentNote,\n        content: [...currentNote.content, {\n          id: newId,\n          text: \"\"\n        }]\n      };\n      this.deps.viewModel.update({\n        currentNote: updatedNote\n      });\n      await this.deps.notesGateway.saveNote(updatedNote);\n    };\n\n    this.saveChildNote = async (childNoteId, text) => {\n      const currentNote = this.tryGetCurrentNote();\n      const childNoteIdx = currentNote.content.findIndex(n => n.id === childNoteId);\n\n      if (childNoteIdx < 0) {\n        throw new Error(`Child note (id=${childNoteId}) wasn't found!`);\n      }\n\n      const updatedNoteContent = [...currentNote.content];\n      updatedNoteContent[childNoteIdx] = { ...updatedNoteContent[childNoteIdx],\n        text\n      };\n      const updatedNote = { ...currentNote,\n        content: updatedNoteContent\n      };\n      this.deps.viewModel.update({\n        currentNote: updatedNote\n      });\n      await this.deps.notesGateway.saveNote(updatedNote);\n    };\n\n    this.deleteChildNote = async childNoteId => {\n      const currentNote = this.tryGetCurrentNote();\n      const updatedNote = { ...currentNote,\n        content: currentNote.content.filter(n => n.id !== childNoteId)\n      };\n      this.deps.viewModel.update({\n        currentNote: updatedNote\n      });\n      await this.deps.notesGateway.saveNote(updatedNote);\n    };\n\n    this.openChildNote = async childNoteId => {\n      const note = await this.tryGetNoteWith(childNoteId);\n      this.deps.viewModel.update({\n        currentNote: note\n      });\n    };\n\n    this.goToUpperLevel = async () => {\n      const currentNote = this.tryGetCurrentNote();\n\n      if (!currentNote.parentId) {\n        throw new Error(\"There is no upper level notes!\");\n      }\n\n      const note = await this.tryGetNoteWith(currentNote.parentId);\n      this.deps.viewModel.update({\n        currentNote: note\n      });\n    };\n\n    this.moveNoteIn = async (id, newParentId) => {\n      const currentNote = this.tryGetCurrentNote();\n      this.deps.viewModel.update({\n        currentNote: { ...currentNote,\n          content: currentNote.content.filter(n => n.id !== id)\n        }\n      });\n      await this.deps.notesGateway.moveNote({\n        id,\n        newParentId,\n        oldParentId: currentNote.id\n      });\n    };\n\n    this.moveNoteOut = async id => {\n      const currentNote = this.tryGetCurrentNote();\n\n      if (!currentNote.parentId) {\n        throw new Error(\"There is no upper level notes!\");\n      }\n\n      this.deps.viewModel.update({\n        currentNote: { ...currentNote,\n          content: currentNote.content.filter(n => n.id !== id)\n        }\n      });\n      await this.deps.notesGateway.moveNote({\n        id,\n        newParentId: currentNote.parentId,\n        oldParentId: currentNote.id\n      });\n    };\n\n    this.changeNotePosition = async (noteId, relatedNoteId, position) => {\n      const currentNote = this.tryGetCurrentNote();\n      const noteToMoveIndex = currentNote.content.findIndex(n => n.id === noteId);\n\n      if (noteToMoveIndex === -1) {\n        throw new Error(`Can't move child note with ID = ${noteId}. Reason: it doesn't exist in current parent note.`);\n      }\n\n      const updatedNoteContent = [...currentNote.content];\n      updatedNoteContent.splice(noteToMoveIndex, 1);\n      const relatedNoteIndex = updatedNoteContent.findIndex(n => n.id === relatedNoteId);\n\n      if (relatedNoteIndex === -1) {\n        throw new Error(`Can't move child note with ID = ${noteId}. Reason: can't find related note with ID = ${relatedNoteId}.`);\n      }\n\n      updatedNoteContent.splice(position === \"up\" ? relatedNoteIndex : relatedNoteIndex + 1, 0, currentNote.content[noteToMoveIndex]);\n      const updatedNote = { ...currentNote,\n        content: updatedNoteContent\n      };\n      this.deps.viewModel.update({\n        currentNote: updatedNote\n      });\n      await this.deps.notesGateway.saveNote(updatedNote);\n    };\n  }\n\n  setDependencies(deps) {\n    this.deps = deps;\n    return this;\n  }\n\n  tryGetCurrentNote() {\n    const {\n      currentNote\n    } = this.deps.viewModel.get();\n\n    if (!currentNote) {\n      throw new Error(\"Notes weren't initialized!\");\n    }\n\n    return currentNote;\n  }\n\n  async tryGetNoteWith(id) {\n    const note = await this.deps.notesGateway.getNote(id);\n\n    if (!note) {\n      throw new Error(`Couldn't find note with id = ${id}`);\n    }\n\n    return note;\n  }\n\n}","map":{"version":3,"names":["NotesController","deps","init","note","notesGateway","getMainNote","viewModel","update","currentNote","addChildNote","tryGetCurrentNote","newId","Date","now","toString","updatedNote","content","id","text","saveNote","saveChildNote","childNoteId","childNoteIdx","findIndex","n","Error","updatedNoteContent","deleteChildNote","filter","openChildNote","tryGetNoteWith","goToUpperLevel","parentId","moveNoteIn","newParentId","moveNote","oldParentId","moveNoteOut","changeNotePosition","noteId","relatedNoteId","position","noteToMoveIndex","splice","relatedNoteIndex","setDependencies","get","getNote"],"sources":["/Users/starkylife/projects/learning-system-app/packages/web/src/pages/notes/model/notes.controller.ts"],"sourcesContent":["import { NoteView } from \"../../../entities/notes\";\nimport { NotesGateway } from \"../../../gateways/notes.gateway\";\nimport { ViewModelInteractor } from \"../../../shared/lib/view-model-interactor\";\nimport { NotesViewModel } from \"./notes.view-model\";\n\nexport type NotesControllerDeps = {\n  viewModel: ViewModelInteractor<NotesViewModel>;\n  notesGateway: NotesGateway;\n};\n\nexport class NotesController {\n  private deps!: NotesControllerDeps;\n\n  setDependencies(deps: NotesControllerDeps) {\n    this.deps = deps;\n    return this;\n  }\n\n  init = async () => {\n    const note = await this.deps.notesGateway.getMainNote();\n    this.deps.viewModel.update({\n      currentNote: note,\n    });\n  };\n\n  addChildNote = async () => {\n    const currentNote = this.tryGetCurrentNote();\n\n    const newId = Date.now().toString();\n    const updatedNote: NoteView = {\n      ...currentNote,\n      content: [...currentNote.content, { id: newId, text: \"\" }],\n    };\n\n    this.deps.viewModel.update({\n      currentNote: updatedNote,\n    });\n    await this.deps.notesGateway.saveNote(updatedNote);\n  };\n\n  saveChildNote = async (childNoteId: string, text: string) => {\n    const currentNote = this.tryGetCurrentNote();\n\n    const childNoteIdx = currentNote.content.findIndex(\n      (n) => n.id === childNoteId\n    );\n    if (childNoteIdx < 0) {\n      throw new Error(`Child note (id=${childNoteId}) wasn't found!`);\n    }\n\n    const updatedNoteContent = [...currentNote.content];\n    updatedNoteContent[childNoteIdx] = {\n      ...updatedNoteContent[childNoteIdx],\n      text,\n    };\n    const updatedNote = {\n      ...currentNote,\n      content: updatedNoteContent,\n    };\n\n    this.deps.viewModel.update({\n      currentNote: updatedNote,\n    });\n    await this.deps.notesGateway.saveNote(updatedNote);\n  };\n\n  deleteChildNote = async (childNoteId: string) => {\n    const currentNote = this.tryGetCurrentNote();\n\n    const updatedNote = {\n      ...currentNote,\n      content: currentNote.content.filter((n) => n.id !== childNoteId),\n    };\n\n    this.deps.viewModel.update({\n      currentNote: updatedNote,\n    });\n    await this.deps.notesGateway.saveNote(updatedNote);\n  };\n\n  openChildNote = async (childNoteId: string) => {\n    const note = await this.tryGetNoteWith(childNoteId);\n\n    this.deps.viewModel.update({\n      currentNote: note,\n    });\n  };\n\n  goToUpperLevel = async () => {\n    const currentNote = this.tryGetCurrentNote();\n\n    if (!currentNote.parentId) {\n      throw new Error(\"There is no upper level notes!\");\n    }\n\n    const note = await this.tryGetNoteWith(currentNote.parentId);\n\n    this.deps.viewModel.update({\n      currentNote: note,\n    });\n  };\n\n  moveNoteIn = async (id: string, newParentId: string) => {\n    const currentNote = this.tryGetCurrentNote();\n    this.deps.viewModel.update({\n      currentNote: {\n        ...currentNote,\n        content: currentNote.content.filter((n) => n.id !== id),\n      },\n    });\n    await this.deps.notesGateway.moveNote({\n      id,\n      newParentId,\n      oldParentId: currentNote.id,\n    });\n  };\n\n  moveNoteOut = async (id: string) => {\n    const currentNote = this.tryGetCurrentNote();\n    if (!currentNote.parentId) {\n      throw new Error(\"There is no upper level notes!\");\n    }\n\n    this.deps.viewModel.update({\n      currentNote: {\n        ...currentNote,\n        content: currentNote.content.filter((n) => n.id !== id),\n      },\n    });\n    await this.deps.notesGateway.moveNote({\n      id,\n      newParentId: currentNote.parentId,\n      oldParentId: currentNote.id,\n    });\n  };\n\n  changeNotePosition = async (\n    noteId: string,\n    relatedNoteId: string,\n    position: \"up\" | \"down\"\n  ) => {\n    const currentNote = this.tryGetCurrentNote();\n\n    const noteToMoveIndex = currentNote.content.findIndex(\n      (n) => n.id === noteId\n    );\n    if (noteToMoveIndex === -1) {\n      throw new Error(\n        `Can't move child note with ID = ${noteId}. Reason: it doesn't exist in current parent note.`\n      );\n    }\n\n    const updatedNoteContent = [...currentNote.content];\n    updatedNoteContent.splice(noteToMoveIndex, 1);\n\n    const relatedNoteIndex = updatedNoteContent.findIndex(\n      (n) => n.id === relatedNoteId\n    );\n    if (relatedNoteIndex === -1) {\n      throw new Error(\n        `Can't move child note with ID = ${noteId}. Reason: can't find related note with ID = ${relatedNoteId}.`\n      );\n    }\n\n    updatedNoteContent.splice(\n      position === \"up\" ? relatedNoteIndex : relatedNoteIndex + 1,\n      0,\n      currentNote.content[noteToMoveIndex]\n    );\n\n    const updatedNote: NoteView = {\n      ...currentNote,\n      content: updatedNoteContent,\n    };\n\n    this.deps.viewModel.update({\n      currentNote: updatedNote,\n    });\n    await this.deps.notesGateway.saveNote(updatedNote);\n  };\n\n  private tryGetCurrentNote() {\n    const { currentNote } = this.deps.viewModel.get();\n    if (!currentNote) {\n      throw new Error(\"Notes weren't initialized!\");\n    }\n    return currentNote;\n  }\n\n  private async tryGetNoteWith(id: string) {\n    const note = await this.deps.notesGateway.getNote(id);\n    if (!note) {\n      throw new Error(`Couldn't find note with id = ${id}`);\n    }\n    return note;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}